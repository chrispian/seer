name: "Recall"
slug: recall
version: 2.0.0
triggers:
  slash: "/recall"
  aliases: []
  input_mode: "inline"
reserved: true

requires:
  secrets: []
  capabilities: ["fragment.query", "fragment.create"]

steps:
  - id: determine-mode
    type: condition
    condition: "{{ ctx.type | default: '' | length > 0 }}"
    then:
      # Query mode - recall existing fragments by type
      - id: query-fragments
        type: fragment.query
        with:
          type: "{{ ctx.type }}"
          limit: "{{ ctx.limit | default: 5 }}"
          order: "latest"
          with_relations: ["type"]
      
      - id: check-results
        type: condition
        condition: "{{ steps.query-fragments.output.count > 0 }}"
        then:
          # Show fragments found
          - id: show-fragments
            type: response.panel
            with:
              type: "recall"
              panel_data:
                type: "{{ ctx.type }}"
                fragments: "{{ steps.query-fragments.output.results }}"
                message: "⚡ Found {{ steps.query-fragments.output.count }} fragments of type '{{ ctx.type }}'"
        else:
          # No fragments found
          - id: show-empty
            type: response.panel
            with:
              type: "recall"
              panel_data:
                type: "{{ ctx.type }}"
                fragments: []
                message: "⚡ No fragments found of type '{{ ctx.type }}'"
    else:
      # Check if there's content to create a recall fragment
      - id: check-content
        type: condition
        condition: "{{ ctx.body | default: ctx.selection | default: ctx.identifier | default: '' | length > 0 }}"
        then:
          # Create mode - create new recall fragment
          - id: get-content
            type: transform
            template: |
              {{ ctx.body | default: ctx.selection | default: ctx.identifier | trim }}
          
          - id: create-recall
            type: fragment.create
            with:
              type: "log"
              content: "{{ steps.get-content.output }}"
              tags: ["recall"]
              metadata:
                command: "recall"
                created_via: "slash_command"
          
          - id: success-response
            type: notify
            with:
              message: "✅ Recall created successfully"
              level: "success"
              response_data:
                type: "system"
                shouldShowSuccessToast: true
                toastData:
                  title: "Recall Created"
                  message: "{{ steps.get-content.output | truncate: 50 }}"
        else:
          # Show help - no type and no content
          - id: show-help
            type: response.panel
            with:
              type: "system"  
              panel_data:
                message: |
                  ⚡ **Recall Command Help**
                  
                  **Query existing fragments:**
                  - `/recall type:todo limit:5` – Recall recent todo fragments
                  - `/recall type:note limit:10` – Recall recent note fragments
                  
                  **Create recall fragment:**
                  - `/recall This is something to remember` – Create a recall fragment
                  
                  **Available types:** todo, note, idea, meeting, task, log