name: "Agent List"
slug: agents
version: 1.0.0
triggers:
  slash: "/agents"
  input_mode: "none"
reserved: true

requires:
  secrets: []
  capabilities: ["model.query"]

steps:
  - id: query-agents
    type: model.query
    with:
      model: "agent_profiles"
      order: "name ASC"

  - id: check-agents-exist
    type: condition
    condition: "{{ steps.query-agents.output.count > 0 }}"
    then:
      - id: format-agent-data
        type: transform
        template: |
          {% set agents = [] %}
          {% for agent in steps.query-agents.output.results %}
            {# Get assignment counts for this agent #}
            {% set active_assignments = 0 %}
            {% set total_assignments = 0 %}
            
            {% set agent_data = {
              "id": agent.id,
              "name": agent.name,
              "slug": agent.slug,
              "type": agent.type,
              "mode": agent.mode,
              "status": agent.status,
              "description": agent.description,
              "capabilities": agent.capabilities | default: [],
              "constraints": agent.constraints | default: [],
              "tools": agent.tools | default: [],
              "active_assignments": active_assignments,
              "total_assignments": total_assignments,
              "updated_at": agent.updated_at
            } %}
            {% set agents = agents | append: agent_data %}
          {% endfor %}
          {{ agents | json_encode }}

      - id: format-success-message
        type: transform
        template: |
          {% set count = steps.query-agents.output.count %}
          {% set plural = count != 1 ? 's' : '' %}
          ğŸ‘¤ Found **{{ count }}** agent{{ plural }}

      - id: show-agent-list
        type: response.panel
        with:
          type: "agent"
          panel_data:
            action: "list"
            message: "{{ steps.format-success-message.output }}"
            agents: "{{ steps.format-agent-data.output | from_json }}"
    else:
      - id: show-empty-list
        type: response.panel
        with:
          type: "agent"
          panel_data:
            action: "list"
            message: "ğŸ‘¤ No agents found. Import delegation data to populate agents."
            agents: []