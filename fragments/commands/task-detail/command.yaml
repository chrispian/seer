name: "Task Detail"
slug: task-detail
version: 1.0.0
triggers:
  slash: "/task-detail"
  input_mode: "inline"
reserved: true

requires:
  secrets: []
  capabilities: ["model.query"]

steps:
  - id: extract-task-id
    type: transform
    template: "{{ ctx.body | trim }}"

  - id: validate-input
    type: condition
    condition: "{{ steps.extract-task-id.output != '' }}"
    then:
      - id: query-task
        type: model.query
        with:
          model: "work_items"
          conditions: |
            {% set identifier = steps.extract-task-id.output %}
            {% if identifier | regex_test: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' %}
              [{"field": "id", "operator": "=", "value": "{{ identifier }}"}]
            {% else %}
              [
                {"field": "metadata->task_code", "operator": "=", "value": "{{ identifier }}"},
                {"field": "metadata->task_code", "operator": "=", "value": "{{ identifier | upper }}", "boolean": "or"}
              ]
            {% endif %}
          limit: 1
          with_relations: ["assignments.agent", "assignedAgent"]

      - id: check-task-exists
        type: condition
        condition: "{{ steps.query-task.output.count > 0 }}"
        then:
          - id: query-task-assignments
            type: model.query
            with:
              model: "task_assignments"
              conditions:
                - field: "work_item_id"
                  operator: "="
                  value: "{{ steps.query-task.output.results.0.id }}"
              order: "assigned_at DESC"
              limit: 20
              with_relations: ["agent"]

          - id: format-task-detail
            type: transform
            template: |
              {% set task = steps.query-task.output.results.0 %}
              {% set assignments = steps.query-task-assignments.output.results %}
              {% set metadata = task.metadata | default: {} %}
              
              {# Find current assignment #}
              {% set current_assignment = null %}
              {% for assignment in assignments %}
                {% if assignment.status not in ['completed', 'cancelled'] %}
                  {% set current_assignment = assignment %}
                  {% break %}
                {% endif %}
              {% endfor %}
              
              {# Format assignments #}
              {% set formatted_assignments = [] %}
              {% for assignment in assignments %}
                {% set assignment_data = {
                  "id": assignment.id,
                  "agent_id": assignment.agent_id,
                  "agent_name": assignment.agent ? assignment.agent.name : null,
                  "agent_slug": assignment.agent ? assignment.agent.slug : null,
                  "status": assignment.status,
                  "assigned_at": assignment.assigned_at,
                  "started_at": assignment.started_at,
                  "completed_at": assignment.completed_at,
                  "notes": assignment.notes,
                  "context": assignment.context
                } %}
                {% set formatted_assignments = formatted_assignments | append: assignment_data %}
              {% endfor %}
              
              {# Format current assignment #}
              {% set formatted_current_assignment = null %}
              {% if current_assignment %}
                {% set formatted_current_assignment = {
                  "id": current_assignment.id,
                  "agent_id": current_assignment.agent_id,
                  "agent_name": current_assignment.agent ? current_assignment.agent.name : null,
                  "agent_slug": current_assignment.agent ? current_assignment.agent.slug : null,
                  "status": current_assignment.status,
                  "assigned_at": current_assignment.assigned_at,
                  "started_at": current_assignment.started_at,
                  "completed_at": current_assignment.completed_at,
                  "notes": current_assignment.notes,
                  "context": current_assignment.context
                } %}
              {% endif %}
              
              {# Build task detail response #}
              {% set task_detail = {
                "id": task.id,
                "task_code": metadata.task_code,
                "task_name": metadata.task_name,
                "status": task.status,
                "delegation_status": task.delegation_status,
                "priority": task.priority,
                "metadata": metadata,
                "delegation_context": task.delegation_context,
                "delegation_history": task.delegation_history,
                "todo_progress": metadata.todo_progress | default: [],
                "updated_at": task.updated_at
              } %}
              
              {# Get task content #}
              {% set content = {
                "agent": task.agent_content,
                "plan": task.plan_content,
                "context": task.context_content,
                "todo": task.todo_content,
                "summary": task.summary_content
              } %}
              
              {% set result = {
                "task": task_detail,
                "current_assignment": formatted_current_assignment,
                "assignments": formatted_assignments,
                "content": content
              } %}
              
              {{ result | json_encode }}

          - id: format-success-message
            type: transform
            template: |
              {% set detail = steps.format-task-detail.output | from_json %}
              {% set task_identifier = detail.task.task_code | default: detail.task.id %}
              ğŸ“‹ Task: {{ task_identifier }} ({{ detail.task.delegation_status }})

          - id: show-task-detail
            type: response.panel
            with:
              type: "task"
              panel_data:
                action: "detail"
                task: "{{ (steps.format-task-detail.output | from_json).task }}"
                current_assignment: "{{ (steps.format-task-detail.output | from_json).current_assignment }}"
                assignments: "{{ (steps.format-task-detail.output | from_json).assignments }}"
                content: "{{ (steps.format-task-detail.output | from_json).content }}"
        else:
          - id: show-task-not-found
            type: response.panel
            with:
              type: "task"
              message: "Task '{{ steps.extract-task-id.output }}' not found. Use `/task-list` to see available tasks."
              should_show_error_toast: true
    else:
      - id: show-missing-input
        type: response.panel
        with:
          type: "task"
          message: "Please provide a task ID. Example: `/task-detail TASK-001` or `/task-detail uuid`"
          should_show_error_toast: true