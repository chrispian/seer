name: "Session Management"
slug: session
version: 2.0.0
triggers:
  slash: "/session"
  aliases: []
  input_mode: "inline"
reserved: true

requires:
  secrets: []
  capabilities: []

steps:
  - id: determine-action
    type: condition
    condition: "{{ ctx.body == 'show' }}"
    then:
      # Show current session
      - id: query-current-session
        type: model.query
        with:
          model: "chat_session"
          conditions:
            - field: "id"
              operator: "="
              value: "{{ ctx.session_id }}"
          limit: 1
      
      - id: format-current-session
        type: transform
        template: |
          **Session Active:**
          - Type: `chat`
          - Identifier: `{{ steps.query-current-session.output.0.short_code }}`
          - Title: `{{ steps.query-current-session.output.0.title | default: steps.query-current-session.output.0.custom_name | default: 'Untitled' }}`
          - Started: `{{ steps.query-current-session.output.0.created_at | date: 'M j, Y H:i' }}`
          - Last Activity: `{{ steps.query-current-session.output.0.last_activity_at | date: 'M j, Y H:i' }}`
      
      - id: show-current-session
        type: response.panel
        with:
          type: "session"
          panel_data:
            action: "show"
            message: "{{ steps.format-current-session.output }}"
            session: "{{ steps.query-current-session.output.0 }}"
    else:
      - id: check-list-action
        type: condition
        condition: "{{ ctx.body == 'list' or ctx.body == '' }}"
        then:
          # List recent sessions
          - id: query-recent-sessions
            type: model.query
            with:
              model: "chat_session"
              conditions:
                - field: "vault_id"
                  operator: "="
                  value: "{{ ctx.vault_id }}"
              order: "last_activity_at DESC"
              limit: 10
          
          - id: check-sessions-exist
            type: condition
            condition: "{{ steps.query-recent-sessions.output | length > 0 }}"
            then:
              - id: format-sessions-list
                type: transform
                template: |
                  ðŸ’¬ **Found {{ steps.query-recent-sessions.output | length }} recent session{% if steps.query-recent-sessions.output | length != 1 %}s{% endif %}**
                  
                  {% for session in steps.query-recent-sessions.output %}
                  - `#{{ session.short_code }}` â€“ {{ session.title | default: session.custom_name | default: 'Untitled' }} *({{ session.last_activity_at | date: 'M j, g:i A' }})*{% if session.is_active %} ðŸŸ¢{% endif %}
                  {% endfor %}
              
              - id: show-sessions-list
                type: response.panel
                with:
                  type: "session"
                  panel_data:
                    action: "list"
                    message: "{{ steps.format-sessions-list.output }}"
                    sessions: "{{ steps.query-recent-sessions.output }}"
            else:
              - id: show-no-sessions
                type: response.panel
                with:
                  type: "session"
                  panel_data:
                    action: "list"
                    message: "ðŸ’¬ No chat sessions found. Start one with `/session start`"
                    sessions: []
        else:
          - id: check-start-action
            type: condition
            condition: "{{ ctx.body == 'start' }}"
            then:
              # Start new session
              - id: create-new-session
                type: model.create
                with:
                  model: "chat_session"
                  data:
                    vault_id: "{{ ctx.vault_id }}"
                    project_id: null
                    title: null
                    custom_name: null
                    is_active: true
                    last_activity_at: "{{ now }}"
              
              - id: notify-session-started
                type: notify
                with:
                  message: "ðŸ’¬ Started session: #{{ steps.create-new-session.output.short_code }}"
                  level: "success"
                  response_data:
                    type: "session-start"
                    shouldShowSuccessToast: true
                    data:
                      session_id: "{{ steps.create-new-session.output.id }}"
                      short_code: "{{ steps.create-new-session.output.short_code }}"
                      vault_id: "{{ ctx.vault_id }}"
                      project_id: null
                    toastData:
                      title: "Session Started"
                      message: "#{{ steps.create-new-session.output.short_code }}"
                      sessionId: "{{ steps.create-new-session.output.id }}"
            else:
              - id: check-end-action
                type: condition
                condition: "{{ ctx.body == 'end' }}"
                then:
                  # End current session
                  - id: check-current-session-exists
                    type: condition
                    condition: "{{ ctx.session_id | default: '' | length > 0 }}"
                    then:
                      - id: query-session-to-end
                        type: model.query
                        with:
                          model: "chat_session"
                          conditions:
                            - field: "id"
                              operator: "="
                              value: "{{ ctx.session_id }}"
                          limit: 1
                      
                      - id: update-session-inactive
                        type: model.update
                        with:
                          model: "chat_session"
                          conditions:
                            - field: "id"
                              operator: "="
                              value: "{{ ctx.session_id }}"
                          data:
                            is_active: false
                      
                      - id: notify-session-ended
                        type: notify
                        with:
                          message: "ðŸ’¬ Ended session: #{{ steps.query-session-to-end.output.0.short_code }}"
                          level: "success"
                          response_data:
                            type: "session-end"
                            shouldShowSuccessToast: true
                            data:
                              session_id: "{{ ctx.session_id }}"
                    else:
                      - id: notify-no-active-session
                        type: notify
                        with:
                          message: "No active session to end."
                          level: "error"
                          response_data:
                            type: "session"
                            shouldShowErrorToast: true
                else:
                  # Show help for unknown action
                  - id: show-session-help
                    type: response.panel
                    with:
                      type: "session"
                      panel_data:
                        message: |
                          # Session Management
                          
                          **Available Commands:**
                          - `/session show` â€“ Show current session details
                          - `/session list` â€“ List recent sessions
                          - `/session start` â€“ Start a new session
                          - `/session end` â€“ End current session
                          
                          **Input provided:** {{ ctx.body | default: '(none)' }}