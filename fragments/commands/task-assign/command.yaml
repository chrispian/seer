name: "Task Assign"
slug: task-assign
version: 1.0.0
triggers:
  slash: "/task-assign"
  input_mode: "inline"
reserved: true

requires:
  secrets: []
  capabilities: ["model.query", "model.create", "model.update"]

steps:
  - id: parse-arguments
    type: transform
    template: |
      {% set input = ctx.body | trim %}
      {% set parts = input | split(' ', 2) %}
      {% if parts | length >= 2 %}
        {{ {"task_id": parts.0, "agent_id": parts.1} | json_encode }}
      {% else %}
        {{ {"error": "Both task ID and agent ID required"} | json_encode }}
      {% endif %}

  - id: validate-arguments
    type: condition
    condition: "{{ (steps.parse-arguments.output | from_json).task_id is defined }}"
    then:
      - id: query-task
        type: model.query
        with:
          model: "App\\Models\\WorkItem"
          conditions: |
            {% set args = steps.parse-arguments.output | from_json %}
            {% set task_id = args.task_id %}
            {% if task_id | regex_test: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' %}
              [{"field": "id", "operator": "=", "value": "{{ task_id }}"}]
            {% else %}
              [
                {"field": "metadata->task_code", "operator": "=", "value": "{{ task_id }}"},
                {"field": "metadata->task_code", "operator": "=", "value": "{{ task_id | upper }}", "boolean": "or"}
              ]
            {% endif %}
          limit: 1

      - id: query-agent
        type: model.query
        with:
          model: "agent_profiles"
          conditions: |
            {% set args = steps.parse-arguments.output | from_json %}
            {% set agent_id = args.agent_id %}
            {% if agent_id | regex_test: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' %}
              [{"field": "id", "operator": "=", "value": "{{ agent_id }}"}]
            {% else %}
              [
                {"field": "slug", "operator": "=", "value": "{{ agent_id }}"},
                {"field": "name", "operator": "=", "value": "{{ agent_id }}", "boolean": "or"}
              ]
            {% endif %}
          limit: 1

      - id: validate-entities
        type: condition
        condition: "{{ steps.query-task.output.count > 0 and steps.query-agent.output.count > 0 }}"
        then:
          - id: close-existing-assignments
            type: model.update
            with:
              model: "task_assignments"
              conditions:
                - field: "work_item_id"
                  operator: "="
                  value: "{{ steps.query-task.output.results.0.id }}"
                - field: "status"
                  operator: "not in"
                  value: ["completed", "cancelled"]
              data:
                status: "cancelled"
                completed_at: "{{ now }}"

          - id: create-assignment
            type: model.create
            with:
              model: "task_assignments"
              data:
                work_item_id: "{{ steps.query-task.output.results.0.id }}"
                agent_id: "{{ steps.query-agent.output.results.0.id }}"
                assigned_at: "{{ now }}"
                status: "assigned"

          - id: update-task
            type: model.update
            with:
          model: "work_items"
              conditions:
                - field: "id"
                  operator: "="
                  value: "{{ steps.query-task.output.results.0.id }}"
              data:
                assignee_type: "agent"
                assignee_id: "{{ steps.query-agent.output.results.0.id }}"
                delegation_status: "assigned"
                delegation_context: |
                  {% set existing_context = steps.query-task.output.results.0.delegation_context | default: {} %}
                  {% set updated_context = existing_context | merge({
                    "agent_recommendation": steps.query-agent.output.results.0.slug,
                    "assigned_agent": {
                      "id": steps.query-agent.output.results.0.id,
                      "slug": steps.query-agent.output.results.0.slug,
                      "name": steps.query-agent.output.results.0.name
                    },
                    "last_assignment_id": steps.create-assignment.output.id,
                    "last_assignment_status": "assigned",
                    "last_assigned_at": now
                  }) %}
                  {{ updated_context | json_encode }}

          - id: format-success-message
            type: transform
            template: |
              {% set task = steps.query-task.output.results.0 %}
              {% set agent = steps.query-agent.output.results.0 %}
              {% set task_identifier = task.metadata.task_code | default: task.id %}
              âœ… Task {{ task_identifier }} assigned to {{ agent.name }}

          - id: show-success
            type: response.panel
            with:
              type: "task"
              message: "{{ steps.format-success-message.output }}"
              should_show_success_toast: true
              toast_data:
                title: "Task Assigned"
                message: "{{ steps.format-success-message.output }}"
              data:
                task_id: "{{ steps.query-task.output.results.0.id }}"
                task_code: "{{ steps.query-task.output.results.0.metadata.task_code }}"
                agent_id: "{{ steps.query-agent.output.results.0.id }}"
                agent_name: "{{ steps.query-agent.output.results.0.name }}"
                assignment_id: "{{ steps.create-assignment.output.id }}"
        else:
          - id: determine-error
            type: transform
            template: |
              {% set args = steps.parse-arguments.output | from_json %}
              {% if steps.query-task.output.count == 0 %}
                Task '{{ args.task_id }}' not found. Use `/task-list` to see available tasks.
              {% else %}
                Agent '{{ args.agent_id }}' not found. Use `/agent-list` to see available agents.
              {% endif %}

          - id: show-not-found
            type: response.panel
            with:
              type: "task"
              message: "{{ steps.determine-error.output }}"
              should_show_error_toast: true
    else:
      - id: show-missing-arguments
        type: response.panel
        with:
          type: "task"
          message: "Please provide both task ID and agent ID. Example: `/task-assign TASK-001 agent-slug`"
          should_show_error_toast: true