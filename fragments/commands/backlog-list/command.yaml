name: "Backlog List"
slug: backlog-list
version: 1.0.0
triggers:
  slash: "/backlog-list"
  input_mode: "none"
reserved: true

requires:
  secrets: []
  capabilities: ["model.query"]

steps:
  - id: query-backlog-tasks
    type: model.query
    with:
      model: "work_items"
      conditions:
        - field: "status"
          operator: "="
          value: "backlog"
          boolean: "or"
        - field: "metadata->backlog_import"
          operator: "="
          value: true
        - field: "status"
          operator: "="
          value: "done"
          boolean: "and"
      order: "created_at DESC"
      limit: 100

  - id: check-tasks-exist
    type: condition
    condition: "{{ steps.query-backlog-tasks.output.count > 0 }}"
    then:
      - id: format-task-data
        type: transform
        template: |
          {% set tasks = [] %}
          {% for task in steps.query-backlog-tasks.output.results %}
            {% set metadata = task.metadata | default: {} %}
            {% set task_data = {
              "id": task.id,
              "task_code": metadata.task_code | default: task.id,
              "task_name": metadata.task_name | default: "Untitled Task",
              "description": metadata.description | default: null,
              "status": task.status,
              "delegation_status": task.delegation_status,
              "priority": task.priority,
              "agent_recommendation": metadata.agent_recommendation | default: null,
              "estimate_text": metadata.estimate_text | default: null,
              "tags": task.tags | default: [],
              "has_content": {
                "agent": task.agent_content != null and task.agent_content != "",
                "plan": task.plan_content != null and task.plan_content != "",
                "context": task.context_content != null and task.context_content != "",
                "todo": task.todo_content != null and task.todo_content != "",
                "summary": task.summary_content != null and task.summary_content != ""
              },
              "created_at": task.created_at,
              "updated_at": task.updated_at,
              "completed_at": task.completed_at
            } %}
            {% set tasks = tasks | append: task_data %}
          {% endfor %}
          {{ tasks | json_encode }}

      - id: format-success-message
        type: transform
        template: |
          {% set count = steps.query-backlog-tasks.output.count %}
          {% set plural = count != 1 ? 's' : '' %}
          ğŸ“‹ Found **{{ count }}** backlog item{{ plural }}

      - id: show-backlog-list
        type: response.panel
        with:
          type: "backlog"
          panel_data:
            action: "backlog_list"
            message: "{{ steps.format-success-message.output }}"
            tasks: "{{ steps.format-task-data.output | from_json }}"
    else:
      - id: show-empty-list
        type: response.panel
        with:
          type: "backlog"
          panel_data:
            action: "backlog_list"
            message: "ğŸ“‹ No backlog items found."
            tasks: []