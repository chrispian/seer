# Database Step Enhancement - Usage Examples
# ==========================================

# Example 1: Todo Management Command
todo_complete:
  name: "Complete Todo Item"
  description: "Mark a todo as completed and update related fragments"
  parameters:
    - name: fragment_id
      type: integer
      required: true
    - name: completion_notes
      type: string
      required: false
  steps:
    # Validate the fragment exists and is a todo
    - type: model.query
      with:
        model: fragment
        conditions:
          - field: id
            value: "{{ context.fragment_id }}"
          - field: type
            value: "todo"
      output: target_todo
      
    # Check if todo was found
    - type: condition
      if: "{{ target_todo.count == 0 }}"
      then:
        - type: notify
          with:
            message: "Todo not found or not a valid todo item"
            type: error
      else:
        # Update the todo status
        - type: model.update
          with:
            model: fragment
            id: "{{ context.fragment_id }}"
            data:
              state:
                status: "completed"
                completed_at: "{{ now() }}"
                completion_notes: "{{ context.completion_notes }}"
              importance: 5
              
        # Find related todos in the same project
        - type: model.query
          with:
            model: fragment
            conditions:
              - field: type
                value: "todo"
              - field: project_id
                value: "{{ target_todo.results[0].project_id }}"
              - field: state.status
                operator: "!="
                value: "completed"
            limit: 5
          output: remaining_todos
          
        # Create completion log
        - type: model.create
          with:
            model: fragment
            data:
              message: "Completed todo: {{ target_todo.results[0].title }}"
              type: "log"
              tags: ["completion", "todo", "automated"]
              vault: "{{ target_todo.results[0].vault }}"
              project_id: "{{ target_todo.results[0].project_id }}"
              metadata:
                completed_todo_id: "{{ context.fragment_id }}"
                completion_time: "{{ now() }}"
                
        # Notify user of completion
        - type: notify
          with:
            message: "Todo completed! {{ remaining_todos.count }} todos remaining in project"
            type: success

# Example 2: Research Session Creation
create_research_session:
  name: "Create Research Session"
  description: "Create a new research session with related fragments"
  parameters:
    - name: topic
      type: string
      required: true
    - name: vault_id
      type: integer
      required: true
    - name: source_fragments
      type: array
      required: false
  steps:
    # Create the research session
    - type: model.create
      with:
        model: chat_session
        data:
          title: "Research: {{ context.topic }}"
          vault_id: "{{ context.vault_id }}"
          custom_name: "research-{{ context.topic | slug }}"
          metadata:
            session_type: "research"
            topic: "{{ context.topic }}"
            created_via: "dsl_command"
      output: research_session
      
    # Find existing fragments related to the topic
    - type: model.query
      with:
        model: fragment
        search: "{{ context.topic }}"
        conditions:
          - field: vault
            value: "{{ context.vault_id }}"
        relations: ["type"]
        order:
          field: importance
          direction: desc
        limit: 10
      output: related_fragments
      
    # Create bookmark for the research session
    - type: model.create
      with:
        model: bookmark
        data:
          name: "Research: {{ context.topic }} - Sources"
          vault_id: "{{ context.vault_id }}"
          fragment_ids: "{{ related_fragments.results | map: 'id' }}"
      output: research_bookmark
      
    # Create initial research notes fragment
    - type: model.create
      with:
        model: fragment
        data:
          message: |
            # Research Session: {{ context.topic }}
            
            **Session ID:** {{ research_session.record.short_code }}
            **Created:** {{ now() }}
            **Bookmark:** {{ research_bookmark.record.name }}
            
            ## Related Fragments Found
            {% for fragment in related_fragments.results %}
            - [{{ fragment.title }}](fragment://{{ fragment.id }}) ({{ fragment.type }})
            {% endfor %}
            
            ## Research Notes
            _Add your research notes here..._
          title: "Research Session: {{ context.topic }}"
          type: "note"
          tags: ["research", "session", "{{ context.topic | slug }}"]
          vault: "{{ context.vault_id }}"
          importance: 4
          metadata:
            session_id: "{{ research_session.record.id }}"
            bookmark_id: "{{ research_bookmark.record.id }}"
            topic: "{{ context.topic }}"
      
    # Response with session details
    - type: response.panel
      with:
        title: "Research Session Created"
        content: |
          **Session:** {{ research_session.record.channel_display }}
          **Bookmark:** {{ research_bookmark.record.name }}
          **Related Fragments:** {{ related_fragments.count }}
          
          Your research session is ready! Found {{ related_fragments.count }} related fragments to get you started.

# Example 3: Archive Cleanup Command
archive_old_content:
  name: "Archive Old Content"
  description: "Archive inactive content older than specified days"
  parameters:
    - name: days_old
      type: integer
      default: 30
    - name: vault_id
      type: integer
      required: true
    - name: dry_run
      type: boolean
      default: false
  steps:
    # Find old inactive chat sessions
    - type: model.query
      with:
        model: chat_session
        conditions:
          - field: vault_id
            value: "{{ context.vault_id }}"
          - field: is_active
            value: false
          - field: last_activity_at
            operator: "<"
            value: "{{ date('-' ~ context.days_old ~ ' days') }}"
        limit: 100
      output: old_sessions
      
    # Find old archived fragments
    - type: model.query
      with:
        model: fragment
        conditions:
          - field: vault
            value: "{{ context.vault_id }}"
          - field: inbox_status
            value: "archived"
          - field: created_at
            operator: "<"
            value: "{{ date('-' ~ context.days_old ~ ' days') }}"
        limit: 100
      output: old_fragments
      
    # Find orphaned bookmarks (no valid fragments)
    - type: model.query
      with:
        model: bookmark
        conditions:
          - field: vault_id
            value: "{{ context.vault_id }}"
        limit: 50
      output: all_bookmarks
      
    # Show what would be archived in dry run
    - type: condition
      if: "{{ context.dry_run }}"
      then:
        - type: response.panel
          with:
            title: "Archive Preview (Dry Run)"
            content: |
              **Would Archive:**
              - Chat Sessions: {{ old_sessions.count }}
              - Fragments: {{ old_fragments.count }}
              - Total Items: {{ old_sessions.count + old_fragments.count }}
              
              **Criteria:**
              - Older than {{ context.days_old }} days
              - Vault ID: {{ context.vault_id }}
              
              Run with dry_run=false to perform actual archival.
      else:
        # Actually perform the archival
        - type: condition
          if: "{{ old_sessions.count > 0 }}"
          then:
            - type: model.delete
              with:
                model: chat_session
                conditions:
                  - field: vault_id
                    value: "{{ context.vault_id }}"
                  - field: is_active
                    value: false
                  - field: last_activity_at
                    operator: "<"
                    value: "{{ date('-' ~ context.days_old ~ ' days') }}"
                soft_delete: true
                
        - type: condition
          if: "{{ old_fragments.count > 0 }}"
          then:
            - type: model.delete
              with:
                model: fragment
                conditions:
                  - field: vault
                    value: "{{ context.vault_id }}"
                  - field: inbox_status
                    value: "archived"
                  - field: created_at
                    operator: "<"
                    value: "{{ date('-' ~ context.days_old ~ ' days') }}"
                soft_delete: true
                
        # Create archival log
        - type: model.create
          with:
            model: fragment
            data:
              message: |
                # Content Archival Complete
                
                **Date:** {{ now() }}
                **Vault:** {{ context.vault_id }}
                **Criteria:** Older than {{ context.days_old }} days
                
                **Archived:**
                - Chat Sessions: {{ old_sessions.count }}
                - Fragments: {{ old_fragments.count }}
                
                **Total:** {{ old_sessions.count + old_fragments.count }} items archived
              title: "Archival Log - {{ now() | date('Y-m-d') }}"
              type: "log"
              tags: ["archival", "cleanup", "automated"]
              vault: "{{ context.vault_id }}"
              importance: 2
              
        - type: notify
          with:
            message: "Archival complete: {{ old_sessions.count + old_fragments.count }} items archived"
            type: success

# Example 4: Smart Tagging Command
smart_tag_fragments:
  name: "Smart Tag Fragments"
  description: "Automatically tag fragments based on content analysis"
  parameters:
    - name: vault_id
      type: integer
      required: true
    - name: tag_to_add
      type: string
      required: true
    - name: search_terms
      type: array
      required: true
  steps:
    # Find fragments matching search criteria
    - type: model.query
      with:
        model: fragment
        conditions:
          - field: vault
            value: "{{ context.vault_id }}"
        search: "{{ context.search_terms | join(' OR ') }}"
        limit: 50
      output: matching_fragments
      
    # Filter fragments that don't already have the tag
    - type: transform
      with:
        input: "{{ matching_fragments.results }}"
        operation: filter
        filter: "not ('{{ context.tag_to_add }}' in item.tags)"
      output: untagged_fragments
      
    # Update each fragment with the new tag
    - type: condition
      if: "{{ untagged_fragments | length > 0 }}"
      then:
        - type: model.update
          with:
            model: fragment
            conditions:
              - field: id
                operator: "IN"
                value: "{{ untagged_fragments | map: 'id' }}"
            data:
              tags: "{{ item.tags | merge([context.tag_to_add]) }}"
              
        # Create tagging log
        - type: model.create
          with:
            model: fragment
            data:
              message: |
                # Smart Tagging Complete
                
                **Tag Added:** {{ context.tag_to_add }}
                **Search Terms:** {{ context.search_terms | join(', ') }}
                **Fragments Tagged:** {{ untagged_fragments | length }}
                
                ## Tagged Fragments
                {% for fragment in untagged_fragments %}
                - [{{ fragment.title }}](fragment://{{ fragment.id }})
                {% endfor %}
              title: "Smart Tagging: {{ context.tag_to_add }}"
              type: "log"
              tags: ["tagging", "automated", "{{ context.tag_to_add }}"]
              vault: "{{ context.vault_id }}"
              
        - type: notify
          with:
            message: "Tagged {{ untagged_fragments | length }} fragments with '{{ context.tag_to_add }}'"
            type: success
      else:
        - type: notify
          with:
            message: "No fragments found that need the tag '{{ context.tag_to_add }}'"
            type: info