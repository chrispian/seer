<?php

namespace Database\Factories;

use App\Models\ChatSession;
use App\Models\Project;
use App\Models\Vault;
use Illuminate\Database\Eloquent\Factories\Factory;

class ChatSessionFactory extends Factory
{
    protected $model = ChatSession::class;

    public function definition(): array
    {
        return [
            'vault_id' => Vault::factory(),
            'project_id' => Project::factory(),
            'title' => 'Chat '.now()->format('M j, g:i A'),
            'short_code' => null, // Will be auto-generated by model
            'custom_name' => null,
            'summary' => null,
            'messages' => [],
            'metadata' => [],
            'message_count' => 0,
            'last_activity_at' => now(),
            'is_active' => true,
            'is_pinned' => false,
            'sort_order' => null,
            'model_provider' => $this->faker->randomElement(['openai', 'ollama']),
            'model_name' => $this->faker->randomElement(['gpt-4o-mini', 'llama3:latest']),
        ];
    }

    public function withMessages(int $count = 3): static
    {
        return $this->state(function () use ($count) {
            $messages = [];

            for ($i = 0; $i < $count; $i++) {
                $messages[] = [
                    'id' => $this->faker->uuid(),
                    'type' => $i === 0 ? 'user' : $this->faker->randomElement(['user', 'assistant']),
                    'message' => $this->faker->sentence(10),
                    'timestamp' => now()->subMinutes($count - $i)->toISOString(),
                    'metadata' => [
                        'model' => $this->faker->randomElement(['gpt-4o-mini', 'llama3:latest']),
                        'response_time_ms' => $this->faker->numberBetween(500, 3000),
                    ],
                ];
            }

            return [
                'messages' => $messages,
                'message_count' => count($messages),
                'last_activity_at' => now(),
            ];
        });
    }

    public function withConversation(): static
    {
        return $this->state(fn () => [
            'messages' => [
                [
                    'id' => $this->faker->uuid(),
                    'type' => 'user',
                    'message' => 'Can you help me understand the fragment processing pipeline?',
                    'timestamp' => now()->subMinutes(10)->toISOString(),
                ],
                [
                    'id' => $this->faker->uuid(),
                    'type' => 'assistant',
                    'message' => 'Sure! The fragment processing pipeline consists of several stages: DriftSync, ParseAtomicFragment, ExtractMetadataEntities, GenerateAutoTitle, and RouteToVault. Each stage processes the fragment and adds metadata.',
                    'timestamp' => now()->subMinutes(9)->toISOString(),
                    'metadata' => [
                        'model' => 'gpt-4o-mini',
                        'response_time_ms' => 1250,
                    ],
                ],
                [
                    'id' => $this->faker->uuid(),
                    'type' => 'user',
                    'message' => 'What happens in the ExtractMetadataEntities stage?',
                    'timestamp' => now()->subMinutes(5)->toISOString(),
                ],
                [
                    'id' => $this->faker->uuid(),
                    'type' => 'assistant',
                    'message' => 'The ExtractMetadataEntities stage analyzes the fragment content to identify and extract structured data like people names, email addresses, phone numbers, URLs, and dates. This metadata is stored in the parsed_entities field.',
                    'timestamp' => now()->subMinutes(4)->toISOString(),
                    'metadata' => [
                        'model' => 'gpt-4o-mini',
                        'response_time_ms' => 890,
                    ],
                ],
            ],
            'message_count' => 4,
            'title' => 'Fragment Processing Pipeline Help',
            'last_activity_at' => now()->subMinutes(4),
        ]);
    }

    public function pinned(): static
    {
        return $this->state(fn () => [
            'is_pinned' => true,
            'sort_order' => $this->faker->numberBetween(1, 10),
        ]);
    }

    public function withCustomName(?string $name = null): static
    {
        return $this->state(fn () => [
            'custom_name' => $name ?? $this->faker->slug(2),
        ]);
    }

    public function inactive(): static
    {
        return $this->state(fn () => [
            'is_active' => false,
            'last_activity_at' => now()->subDays($this->faker->numberBetween(7, 30)),
        ]);
    }

    public function withSummary(): static
    {
        return $this->state(fn () => [
            'summary' => $this->faker->paragraph(3),
            'metadata' => [
                'summary_generated_at' => now()->toISOString(),
                'summary_model' => 'gpt-4o-mini',
            ],
        ]);
    }

    public function withVault(string $vault, ?int $projectId = null): static
    {
        return $this->state(function () use ($vault, $projectId) {
            $vaultModel = Vault::where('name', $vault)->first() ?? Vault::factory()->create(['name' => $vault]);

            return [
                'vault_id' => $vaultModel->id,
                'project_id' => $projectId ?? Project::factory()->create(['vault_id' => $vaultModel->id])->id,
            ];
        });
    }

    public function openai(): static
    {
        return $this->state(fn () => [
            'model_provider' => 'openai',
            'model_name' => $this->faker->randomElement(['gpt-4o', 'gpt-4o-mini']),
        ]);
    }

    public function ollama(): static
    {
        return $this->state(fn () => [
            'model_provider' => 'ollama',
            'model_name' => $this->faker->randomElement(['llama3:latest', 'llama3:8b']),
        ]);
    }
}
